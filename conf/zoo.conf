http {
  zookeeper                127.0.0.1:2181;
  zookeeper_log_level      debug;
  zookeeper_recv_timeout   60000;
  zookeeper_ethemeral_node /nginx 127.0.0.1 "nginx";

  lua_shared_dict config    64k;
  lua_shared_dict zoo_cache 10m;

  # path to LUA modules
  lua_package_path "lib/?.lua;;lua/?.lua;;";
  lua_package_cpath "lib/lua/5.1/?.so;;";

  lua_socket_log_errors off;

  include mime.types;

  client_body_buffer_size  32m;
  client_max_body_size     32m;

  init_by_lua_block {
    ngx.shared.config:set("zoo.cache.on", true)
    ngx.shared.config:set("zoo.cache.ttl", 60)
    ngx.shared.config:set("zoo.cache.debug", true)

    local cjson = require "cjson"

    ngx.shared.config:set("zoo.cache.path.ttl", cjson.encode({
      { path = "/nginx", ttl = 0 },
      { path = "/services", ttl = 0 }
    }))
  }

  init_worker_by_lua_block {
    assert(ngx.timer.at(1, function()
      local zoo = require "zoo"
      local cjson = require "cjson"

      zoo.delete_recursive("/watched1")
      zoo.delete_recursive("/watched2")

      zoo.create("/watched1")
      zoo.create("/watched2")

      local function on_event(ctx)
        local data = assert(zoo.watch(ctx.path, ctx.watcher_type, on_event, ctx))
        ngx.log(ngx.INFO, "on_event: ", ctx.path, "=", cjson.encode(data))
      end

      on_event {
        watcher_type = zoo.WatcherType.DATA,
        path = "/watched1"
      }

      on_event {
        watcher_type = zoo.WatcherType.DATA,
        path = "/watched2"
      }

      on_event {
        watcher_type = zoo.WatcherType.CHILDREN,
        path = "/watched1"
      }

      on_event {
        watcher_type = zoo.WatcherType.CHILDREN,
        path = "/watched2"
      }

      local stop

      assert(ngx.timer.at(60, function()
        assert(zoo.unwatch("/watched1", zoo.WatcherType.DATA))
        assert(zoo.unwatch("/watched1", zoo.WatcherType.CHILDREN))
        assert(zoo.unwatch("/watched2", zoo.WatcherType.DATA))
        assert(zoo.unwatch("/watched2", zoo.WatcherType.CHILDREN))
        ngx.log(ngx.INFO, "unwatch")
        stop = ngx.now() + 10
      end))

      local i = 0

      local function change(premature)
        if premature or (stop and stop < ngx.now()) then
          return
        end

        pcall(function()
          if zoo.connected() then
            i = i + 1

            assert(zoo.set("/watched1", i))
            assert(zoo.set("/watched2", i))

            if i % 2 == 1 then
              assert(zoo.create("/watched1/1"))
              assert(zoo.create("/watched2/1"))
            else
              assert(zoo.delete("/watched1/1"))
              assert(zoo.delete("/watched2/1"))
            end

            ngx.log(ngx.INFO, "update")
          end
        end)

        assert(ngx.timer.at(1, change))
      end

      assert(ngx.timer.at(1, change))
    end))
  }

  server {
    listen 12181;

    default_type application/json;

    server_name zoo;

    include zoo_server.conf;
  }

  server {
    listen 8001;
    zookeeper_register_port /nginx/8001 8001 "nginx-8001";
    location / {
      return 200 '8001';
    }
  }

  server {
    listen 8002;
    location /a {
      zookeeper_register_port /nginx/8002/a 8002;
      return 200 '8002';
    }
    location /b {
      zookeeper_ethemeral_node /nginx/8002/b 127.0.0.1:8002;
      return 200 '8002';
    }
  }
}
