zookeeper              127.0.0.1:2181;
zookeeper_log_level    debug;
zookeeper_recv_timeout 5000;

server {
  listen 4444;

  location = /get {
    content_by_lua_block {
        local zoo = require 'zoo'
        local ok, value, err, stat = zoo.get(ngx.var.arg_znode)
        if ok then
          ngx.say(value)
          ngx.say("czxid:" .. stat.czxid)
          ngx.say("mzxid:" .. stat.mzxid)
          ngx.say("ctime:" .. stat.ctime)
          ngx.say("mtime:" .. stat.mtime)
          ngx.say("version:" .. stat.version)
          ngx.say("cversion:" .. stat.cversion)
          ngx.say("aversion:" .. stat.aversion)
          ngx.say("ephemeralOwner:" .. stat.ephemeralOwner)
          ngx.say("dataLength:" .. stat.dataLength)
          ngx.say("numChildren:" .. stat.numChildren)
          ngx.say("pzxid:" .. stat.pzxid)
        else
          ngx.say(err)
        end
    }
  }

  location = /childrens {
    content_by_lua_block {
        local zoo = require 'zoo'
        local ok, childs, err = zoo.childrens(ngx.var.arg_znode)
        if ok then
          for _, child in pairs(childs)
          do
            ngx.say(child)
          end
        else
          ngx.say(err)
        end
    }
  }

  location = /set {
    content_by_lua_block {
        local zoo = require 'zoo'
        local ok, err, stat = zoo.set(ngx.var.arg_znode, ngx.var.arg_value, ngx.var.arg_version)
        if ok then
          ngx.say("Stored")
          ngx.say("czxid:" .. stat.czxid)
          ngx.say("mzxid:" .. stat.mzxid)
          ngx.say("ctime:" .. stat.ctime)
          ngx.say("mtime:" .. stat.mtime)
          ngx.say("version:" .. stat.version)
          ngx.say("cversion:" .. stat.cversion)
          ngx.say("aversion:" .. stat.aversion)
          ngx.say("ephemeralOwner:" .. stat.ephemeralOwner)
          ngx.say("dataLength:" .. stat.dataLength)
          ngx.say("numChildren:" .. stat.numChildren)
          ngx.say("pzxid:" .. stat.pzxid)
        else
          ngx.say(err)
        end
    }
  }

  location = /create {
    content_by_lua_block {
        local zoo = require 'zoo'
        local ok, r, err = zoo.create(ngx.var.arg_znode, ngx.var.arg_value)
        if ok then
          ngx.say(r)
        else
          ngx.say("ERR:" .. err)
        end
    }
  }

  location = /delete {
    content_by_lua_block {
        local zoo = require 'zoo'
        local ok, err = zoo.delete(ngx.var.arg_znode)
        if ok then
          ngx.say("Deleted")
        else
          ngx.say(err)
        end
    }
  }
}
